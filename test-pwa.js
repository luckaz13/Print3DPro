// Script de teste PWA - Execute no console do navegador
// Para testar as funcionalidades PWA implementadas

console.log('üöÄ Testando funcionalidades PWA do Print3DPro...\n');

// 1. Verificar Service Worker
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.getRegistrations().then(registrations => {
    if (registrations.length > 0) {
      console.log('‚úÖ Service Worker registrado:', registrations[0].scope);
      
      // Verificar estado do service worker
      const sw = registrations[0];
      if (sw.active) {
        console.log('‚úÖ Service Worker ativo');
      }
      if (sw.waiting) {
        console.log('‚è≥ Service Worker aguardando ativa√ß√£o');
      }
    } else {
      console.log('‚ùå Service Worker n√£o encontrado');
    }
  });
} else {
  console.log('‚ùå Service Worker n√£o suportado');
}

// 2. Verificar Manifest
fetch('/Print3DPro/manifest.json')
  .then(response => response.json())
  .then(manifest => {
    console.log('‚úÖ Manifest carregado:', manifest.name);
    console.log('üì± √çcones dispon√≠veis:', manifest.icons.length);
    console.log('üéØ Shortcuts:', manifest.shortcuts?.length || 0);
  })
  .catch(error => {
    console.log('‚ùå Erro ao carregar manifest:', error);
  });

// 3. Verificar instalabilidade
let deferredPrompt;
window.addEventListener('beforeinstallprompt', (e) => {
  console.log('‚úÖ App √© instal√°vel');
  deferredPrompt = e;
});

// 4. Verificar se j√° est√° instalado
if (window.matchMedia('(display-mode: standalone)').matches) {
  console.log('‚úÖ App j√° est√° instalado (modo standalone)');
} else if (window.navigator.standalone === true) {
  console.log('‚úÖ App j√° est√° instalado (iOS)');
} else {
  console.log('üì± App n√£o est√° instalado');
}

// 5. Verificar status online/offline
console.log('üåê Status de conex√£o:', navigator.onLine ? 'Online' : 'Offline');

window.addEventListener('online', () => {
  console.log('üåê Voltou online');
});

window.addEventListener('offline', () => {
  console.log('üì¥ Ficou offline');
});

// 6. Testar cache
caches.keys().then(cacheNames => {
  console.log('üíæ Caches dispon√≠veis:', cacheNames);
  
  cacheNames.forEach(cacheName => {
    caches.open(cacheName).then(cache => {
      cache.keys().then(keys => {
        console.log(`üì¶ Cache "${cacheName}": ${keys.length} itens`);
      });
    });
  });
});

// 7. Fun√ß√£o para instalar o app (se dispon√≠vel)
window.installPWA = function() {
  if (deferredPrompt) {
    deferredPrompt.prompt();
    deferredPrompt.userChoice.then((choiceResult) => {
      if (choiceResult.outcome === 'accepted') {
        console.log('‚úÖ Usu√°rio aceitou instalar o PWA');
      } else {
        console.log('‚ùå Usu√°rio rejeitou instalar o PWA');
      }
      deferredPrompt = null;
    });
  } else {
    console.log('‚ùå Prompt de instala√ß√£o n√£o dispon√≠vel');
  }
};

// 8. Fun√ß√£o para testar notifica√ß√µes (se suportado)
window.testNotifications = function() {
  if ('Notification' in window) {
    if (Notification.permission === 'granted') {
      new Notification('Print3DPro PWA', {
        body: 'Notifica√ß√µes funcionando!',
        icon: '/Print3DPro/generated-icon.png'
      });
      console.log('‚úÖ Notifica√ß√£o enviada');
    } else if (Notification.permission !== 'denied') {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          new Notification('Print3DPro PWA', {
            body: 'Notifica√ß√µes ativadas!',
            icon: '/Print3DPro/generated-icon.png'
          });
          console.log('‚úÖ Permiss√£o concedida e notifica√ß√£o enviada');
        }
      });
    }
  } else {
    console.log('‚ùå Notifica√ß√µes n√£o suportadas');
  }
};

// 9. Informa√ß√µes do dispositivo
console.log('üì± Informa√ß√µes do dispositivo:');
console.log('- User Agent:', navigator.userAgent);
console.log('- Plataforma:', navigator.platform);
console.log('- Idioma:', navigator.language);
console.log('- Conex√£o:', navigator.connection?.effectiveType || 'Desconhecida');

// 10. Comandos dispon√≠veis
console.log('\nüõ†Ô∏è Comandos dispon√≠veis:');
console.log('- installPWA(): Tentar instalar o PWA');
console.log('- testNotifications(): Testar notifica√ß√µes');

console.log('\n‚ú® Teste PWA conclu√≠do! Verifique os resultados acima.');